#!/usr/bin/env python3

inputDNA = "ACAGCAAGCCATTCCTTAGAGAACGAAATTACGGCGACCGTATAAAACATAGCTCCGAGGCATACACTGACGTGTTGGGAATGTATATAAATACAAGAGAGACCGACGCATGATCTAAGCTCGCTCATGGATGACGGCGATCTCACTCACTTCCGAATTATCTACACTTGGGACGCGTTAGCAACGCGCCTGCTTGAGGCTGCACACCAGAGCAGCTGCGCTGCCATAAGGTGAGTCCTAGCACGTACCTGCGAAGTTACTTCGGTCAAGCTAGGGAAGGCTGTTTTATTAGAAGCAATGCTCACCTACTGTGTGGTGAGACTGATAGCAGCCCTGAAACATGTGTGTATACAATTGGTGAATAGATACGTTTGCTAACCGCTAAAATCTTACGCCTGACCCACACAGTCGATGATTCGGCTGACATTCTATACAACACCTCGACAACCCGTAAAAGGCTTGAGTTAGTATCGTGCAAAGCATCCCATCCTGTGAGATTATAGTGGCATAGACATATAAGGGCTGGAAATTTCCGCCGTAATAGTGACCGCCCTTACAAGCGTAATGTAGTGCCGCCGTTAATCATTTGTTTGAGTCCGTAGGGCAGGACGGAAACCCTGCTATTGTGGACTCCCACTAATAGGGGATTCTCGGAGACGATCAACTTAAGGGGAGAACGGCCCACTAAGGCATCCCTCGCTAGTTCTGTCTTGGCGGGCGCAGGACGTTATGGCTCTTGAGACGTTCTTCGTTGCTTCTACTGATTCTCAATACTATGGTAATAGTTCTGTCGAGCGGTTTTCGTTTTTGAACTAGGTTGACCCCTTTTAAGCGATGCAGCAGATCCTGGCAGGCCATCCCAAACCGGGTTTTCTGTTGCGTCCGGATGTTTCGCAGCGATACTCTGTTTTTCGGAGGCCTATGCACTGCGGAATTGGTAGACTTTAAAGGCTCGTTTATCCGCTGCTTTACTCAGAACAGCATTCGTGCTCCGCGCCTGGATTGACGGTTCATTTTCTGTGGTAATTTAGCCTGGACGTGTCTCATGCGAAGAAGATATCTCTTTGAAATGCTTGGTAGAGACATGTTTTTTACCATTACCCATCAACAGTCCGTGGAAAAAGGTATCTTTCCAGAACACGGCATGTCCGCTTTGCAAGTGGTGCCCAAGTTGGTGACTTAACCTCGCATAGCGACTCGTGATTTCTCTCAGCTGGTACATGGTCCCATGTAACCTGATGTATATTAAATGGCTGGAACTGCATTTCTGAGTCGGCTATGCATCATCGGAGGTTGAGCATTATTTCGCTAACCGAACGGCCGGGTTAGACTAAGTATCCCTCTGACCCGAAACACATAGATCCCGCTTTGGTATCGGACCATGTCCCCCAATCCTCTGCTCGCGCGGAAGTCGACCAATGCTCATCAGAGAGTTATTTAATATCATGGCTCATGTACAAAACTGGGAATATAGTTACAGGGGCATGGTAGCTGCCTCAAGAGCCCGACATGGGGCCCGTGCGACCTTATCGAGTGCAAGACAGTCTCTATACCTGGCTACCTGCAAATGATTGACGACAATTCCCCCGGCAAGCATCGTCCGTTTCCTGGCCCCTACATGATAATTTGTATAATTAGTTGTAAGCTAGGCCAAACGCAGCGACCTGCCTAGATGAGGTGGCGCCCCCCCGTTATCAGCACCACTCCAGCACTGAAGACTTTCGACAAGCGAGTCTCACGGTCTACCCCTCATGACTAGAGATGGAATCCGATGGGGTGCGGAGGCTTGGGCAGCGACGACAAAACTTATATGAGCAACGTAATACTACATCACGAATCGGGTACATTCATAGGGTGCCGCTGTGCGCCAGCCCGTTAGATTTGCTGCCGCTGCGACATTATTTGAGAGCTCACCTCAGCCCTGACTTCAAGGCTTTGAATGGCATGACTCGTGTTCAACAAGCAAATGTGCTCACCATCAGTCTAGCTTTGACAGAGATGTACGCTCCCTCTAGATGAACCGTTATTGTATTTTCTTACAATGACATCTTGGGTAAGCGAACAGTTTTATGCCAACGATCCTTACGTGAAGTTGGAGAGATAGACATTTGTGTTTCTGCTATATTTAAAGTAGTGTGAAAACCGTTTGACTTGGCCAATGCCTGCATCCCCGAAAAAGCATATCCACTGTCGAGGGTATGATCCAGCGACGTTGGAACGGGGCGCGTTTAAACTAGGCGCCGCATTTTGAATCGCAATCGAGGCAACTGACACAGTAGCATGCGACGCGAATAATCACGTTGAAGCAGTGTTTTAGATACAATCTTCCCATCTTCGAGCAACCGAAACGATGTAAAGACCAGAGGGGAGTAGCTCCTCCCTGCTAAAGTAAGAGTGAGATAAGATTCGCCGTGGGGGGATGTACGACCAATATACCTTGCAGTGAGTTTATTGGGATGCGACGTCGCTTAGCGCCGGAATATCTCGCTACCCTACGCGCGATCTTACCCTTAGGCATTTCCTTAATTGAGTGAGCAGAGTCCCTGCATGTGCTCGCCTCGAGCACCATCACGTCATTTAAGTGTAAGTTCAGGAGAGCGCCGTGCAAACAATTCCGACGGAGCTGAAGGCATATGAACCCGCTCTGGATTCGAGCCTTCGTGACGGAGAAGGATACATGAAATCAAGCTCGGATCAATGTTTACACTATCAGCATAGCAAGAGCAATACCTTTTCAATTGGAATATGAGTGAAGGTTGCCACCCAAGGAGAACCCGGGTTCTGATCTTTGTGCACTCCGTAGTCCCGTTGGTCCAGGACACTGTATCATCTGTACGGCAAACTGGGAAGTGCGAGGCCGGACCGTTACCCCGAGCAGTCGGAGACATGGGGATATTGGGGGGGAACTTTCGGCCGACGAACGGGATCAGCGCTCTTATCATTAGCTCTATGGTATCCAAGCGAATAATGCTTCATTATCAAATCTTCAGCGTTATGTGCAGGATTTAGGTGGTGGGGTTTTCAACAAGCTTGGTAGGCAACCCTTACCCAATCGCCAGGCATATTAAACGGACCCATGTTCGGGCGGGCGGCCCCTGTATTGTCCTGACAGCGCGACGTTCTCCGCCTAATAATAACGAAATCTGTGAAAAGCCACCCCGTCGAACCGATACAGAGTTTCGATGAGGGCGGACTAATGTCGTATTGCGGCGGATCCGTTCTAAGCATAATTGCCCGTCATATGTAGGCCTAAACTCGTGAGCAGTCTAGGAATGGACTCCCGTTGCTGTCACTTCCACCTGATTCACACACAGCTAACAATGGTGCGCATATACGCCAAGTCGATACTTATAGCCTTCGAAGACCTTCTCTTAGAGCGAGGTTAGAAACCCCAGATTAACGGCAGCCCTATGCCCGTGAACATCGATCTAATAACAGTGTTACATCAGATTAAAGCCTGCTTCCTTTTGTCACACGAGCTTAGCTCTCTCCTTCGCGCTGCGTAACCTCGATGTAGCCGAGTGACATTAAGCTCCCCCCGTGGCGGTGGAGCAAAAGCCGTGTGATTCGTGCTGGGGTTCCTCGTTCCGTGCCCGTTACACAATATATCGAGGAGTTGGGTGCGCCACAGTACGATATACAAAGCGGAAACTTACTCGGCTAGCGGATTATGGCACGGCCCGTATTTGGTCGCTTTCCATCAACTATAAAGGGCGCAGCTACTGCCTATCAGAGGATGACTCGCACGAGGGCTGCAGTCTTTCGAGCAATCTGACTGGGTCGCCGTATAATTAGACTAATAACGCCTCCACACCATTGGGATTACTAATTCAGTGACACGGATCGAATTGTTGACGTAACAGCGCCACTTCTGTCCATTGAAGCGTTTCGTTGTTGGTACATACTCCGTTCACAGGAGTGATGTCTTCGATAGCTATTTACGTCAGCGGATGGACCAGGGGCGTCCTTGGAGTATATAATTACGTGTTTTTACTGGTACTACAGAGGCAAGCGGGAATCAACTGGGACACGCAAGCCGCGCGAGGCCACAGATTTCTTACGGCCAGTTATCCAAACAAATACCTACCACCTTTGTCAAAGAGCACGTACAGGGTCGTCAATGATAATTTGTCAAACCATTAAAAGCCAATAGCAGTTGCCCTCTTCGCCGATGGGTTGCAGCCGCCTGAAATGTCAACATTGCTCATATCCAGTGGACTCAGACTACCGTCGTTCTCTAATCGACACAGGCCTAAGCTGCCGAAAACAGGCATATGAGTGTCCGAACAAGGTTTCTACATTTTCGGCATTAGAGAGCTCGCCTTCGTTTTATTTAAGGAATCTATATTTGGTGGAAATTGTAGTCTCCCCTAGGATGAAAAGAACGGCTTCTTCGATCACCACACGTCAGATACGAAGCATTACTCCGGGCGTGACCTACCCGGCACGGATATGTTAGCAATTACCGGCAGCGGGTAAACAGTCCTGACGACGTCCGTCCCTGTTGTTACGTAAACGTTCCAAGGGGAGAGCTATGAAGGAGCCAGTTGAATTCCATTACATGATGCGCGCGGCATCTATTTGAATGGGGCATAAGGACTCTTCTCCGTGCTCTGCAGTAGAACATTCATAGTAAAGTGATCGCTCCCTGGGAATCTAATTCTATCATTTTCAGAGGCTTAAGCTCTAGGACTAAATCTCTATTGGAACAACACTACCCTGTCTTACGTGGTTGCATTTATTCTGCCGAACGGTCCCTCAGTAAATTTATACTTCGTGATAGCACTTCGCTTCTCCGGAGGAATCTAGCGATACTTAAGCCAAACGCGCACCTCGAGATTGAGCAGGGCCTAACAGGCCCGAGGCCTCTCAGTCAAGCACCCCAGTCTTTTCTGTATCCTCGAGTCGTCATTCAGTGTTTCTGCTCGGGACTGACTGCGGACAACCTACGATCAATATCGACACTACTGTGCTTTTAGCGCGGATGACCTCCCGGGCAG"

# Task 1 (1 pts)
def DNAtoRNA(inputDNA):
    """Converts DNA string to RNA by changing Thymines to Uracils"""
    rna = ""
    for i in inputDNA:
        if i == 'T':
            rna += 'U'
        else:
            rna += i
    return rna

 
# Task 2 (3 pts)
def getNucleotidePercentages(inputDNA):
    """Returns a dictionary containing Nuclotide percentages. The keys of the output 
    dictionary must be written EXACTLY as 'A', 'C', 'T' and 'G' """
    countALL = len(inputDNA)
    countA=0
    countC=0
    countG=0
    countT=0
    for i in inputDNA:
        if i == 'A':
            countA+=1
        elif i == 'C':
            countC+=1
        elif i == 'T':
            countT+=1
        elif i == 'G':
            countG+=1
    percentages = {
    'A': round((countA / countALL) * 100, 2),
    'C': round((countC / countALL) * 100, 2),
    'T': round((countT / countALL) * 100, 2),
    'G': round((countG / countALL) * 100, 2) }
    return percentages

def count_Pur_Pyr(inputDNA):
    """Returns a dictionary containing the number of purine and pyrimidine bases. 
    The keys of the output dictionary must be written EXACTLY as 'Number of purine 
    bases' and 'Number of pyrimidine bases' """
    purine = 0
    pyrimidine = 0
    for i in inputDNA:
        if i in ('A', 'G'):
            purine+=1
        elif i in ('C', 'T'):
            pyrimidine+=1
    result = {
        'Number of purine bases': purine,
        'Number of pyrimidine bases': pyrimidine
    }
    return result

# Task 3 (2 pts)
def getComplementaryDNA(inputDNA):
    """Returns complementary strand of a given DNA"""
    complementary = ""
    for i in inputDNA:
        if i == 'A':
            complementary+='T'
        elif i == 'T':
            complementary+='A'
        elif i == 'C':
            complementary+='G'
        elif i == 'G':
            complementary+='C'
    return complementary

# Task 4 (1 pts)
def getReverseComplementaryDNA(inputDNA):
    complementaryDNA = getComplementaryDNA(inputDNA)
    """Returns reverse complementary strand of a given DNA"""
    reverseComplementaryDNA = complementaryDNA[::-1]
    return reverseComplementaryDNA

# Task 5 (3 pts)
def find_motifs(inputDNA):
    """Returns just the number of the occurence of the motif at a given DNA sequence."""
    motif = "TATAAA" 
    motifRevComplement = "TTTATA"
    count = 0
    for i in range(len(inputDNA) - len(motif) + 1):
        subsequence = inputDNA[i:i + len(motif)]
        subsequenceRevComplement = getReverseComplementaryDNA(subsequence)
        if subsequence == motif or subsequenceRevComplement == motif:
            count += 1
    return count
 